#!/bin/bash
# WARNING:
# *** do NOT use TABS for indentation, use SPACES
# *** TABS will cause errors in some linux distributions

# CONFIGURATION:

# TERM_DISPLAY_MODE can be "plain" or "color"
TERM_DISPLAY_MODE=color
TERM_STATUS_COLUMN=60
TERM_COLOR_GREEN="\\033[1;32m"
TERM_COLOR_RED="\\033[1;31m"
TERM_COLOR_YELLOW="\\033[1;33m"
TERM_COLOR_NORMAL="\\033[0;39m"

export INSTALL_LOG_FILE=/tmp/mtwilson-install.log

### FUNCTION LIBRARY: terminal display functions

# move to column 60:    term_cursor_movex $TERM_STATUS_COLUMN
# Environment:
# - TERM_DISPLAY_MODE
term_cursor_movex() {
  local x="$1"
  if [ "$TERM_DISPLAY_MODE" = "color" ]; then
    echo -en "\\033[${x}G"
  fi
}

# Environment:
# - TERM_DISPLAY_MODE
# - TERM_DISPLAY_GREEN
# - TERM_DISPLAY_NORMAL
echo_success() {
  if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_GREEN}"; fi
  echo ${@:-"[  OK  ]"}
  if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_NORMAL}"; fi
  return 0
}

# Environment:
# - TERM_DISPLAY_MODE
# - TERM_DISPLAY_RED
# - TERM_DISPLAY_NORMAL
echo_failure() {
  if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_RED}"; fi
  echo ${@:-"[FAILED]"}
  if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_NORMAL}"; fi
  return 1
}

# Environment:
# - TERM_DISPLAY_MODE
# - TERM_DISPLAY_YELLOW
# - TERM_DISPLAY_NORMAL
echo_warning() {
  if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_YELLOW}"; fi
  echo ${@:-"[WARNING]"}
  if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_NORMAL}"; fi
  return 1
}

### SHELL FUNCTIONS

# parameters: space-separated list of files to include (shell functions or configuration)
# example:  shell_include_files /path/to/file1 /path/to/file2 /path/to/file3 ...
# if any file does not exist, it is skipped
shell_include_files() {
  for filename in "$@"
  do
    if [ -f "${filename}" ]; then
      . ${filename}
    fi
  done
}


### FUNCTION LIBRARY: information functions

# Runs its argument and negates the error code: 
# If the argument exits with success (0) then this function exits with error (1).
# If the argument exits with error (1) then this function exits with success (0).
# Note: only works with arguments that are executable; any additional parameters will be passed.
# Example:  if not using_java; then echo "Warning: skipping Java"; fi 
no() { $* ; if [ $? -eq 0 ]; then return 1; else return 0; fi }
not() { $* ; if [ $? -eq 0 ]; then return 1; else return 0; fi }

# extracts the major version number (1) out of a string like 1.2.3_4
version_major() {
  echo "${1}" | awk -F . '{ print $1 }'
}
# extracts the minor version number (2) out of a string like 1.2.3_4
version_minor() {
  echo "${1}" | awk -F . '{ print $2 }'
}
# extracts the second minor version number (3) out of a string like 1.2.3_4
version_extract3() {
  local thirdpart=`echo "${1}" | awk -F . '{ print $3 }'`
  echo "${thirdpart}" | awk -F _ '{ print $1 }'
}
# extracts the fourth minor version number (4) out of a string like 1.2.3_4
version_extract4() {
  local thirdpart=`echo "${1}" | awk -F . '{ print $3 }'`
  echo "${thirdpart}" | awk -F _ '{ print $2 }'
}

# two arguments: actual version number (string), required version number (string)
# example:  `is_version_at_least 4.9 5.0` will return "no" because 4.9 < 5.0
is_version_at_least() {
  local testver="${1}"
  local reqver="${2}"
  local hasmajor=`version_major "${testver}"`
  local hasminor=`version_minor "${testver}"`
  local reqmajor=`version_major "${reqver}"`
  local reqminor=`version_minor "${reqver}"`
  if [[  -n "${reqmajor}" && "${hasmajor}" -gt "${reqmajor}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -z "${reqminor}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -n "${reqminor}" && "${hasminor}" -ge "${reqminor}" \
     ]]; then
#    echo "yes"
    return 0
  else
#    echo "no"
    return 1
  fi  
}

# like is_version_at_least but works on entire java version string 1.6.0_29
# instead of just a major.minor number
# Parameters:
# - version to test (of installed software)
# - minimum required version
# Return code:  0 (no errors) if the java version given is greater than or equal to the minimum version
is_java_version_at_least() {
  local testver="${1}"
  local reqver="${2}"
  local hasmajor=`version_major "${testver}"`
  local hasminor=`version_minor "${testver}"`
  local hasminor3=`version_extract3 "${testver}"`
  local hasminor4=`version_extract4 "${testver}"`
  local reqmajor=`version_major "${reqver}"`
  local reqminor=`version_minor "${reqver}"`
  local reqminor3=`version_extract3 "${reqver}"`
  local reqminor4=`version_extract4 "${reqver}"`
  if [[  -n "${reqmajor}" && "${hasmajor}" -gt "${reqmajor}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -z "${reqminor}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -n "${reqminor}" && "${hasminor}" -gt "${reqminor}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -n "${reqminor}"  && "${hasminor}"  -eq "${reqminor}" \
       && -n "${reqminor3}" && "${hasminor3}" -gt "${reqminor3}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -n "${reqminor}"  && "${hasminor}"  -eq "${reqminor}" \
       && -z "${reqminor3}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -n "${reqminor}"  && "${hasminor}"  -eq "${reqminor}" \
       && -n "${reqminor3}" && "${hasminor3}" -eq "${reqminor3}" \
       && -z "${reqminor4}" \
     || \
       -n "${reqmajor}" && "${hasmajor}" -eq "${reqmajor}" \
       && -n "${reqminor}"  && "${hasminor}"  -eq "${reqminor}" \
       && -n "${reqminor3}" && "${hasminor3}" -eq "${reqminor3}" \
       && -n "${reqminor4}" && "${hasminor4}" -ge "${reqminor4}"  \
     ]]; then
#    echo "yes"
    return 0
  else
#    echo "no"
    return 1
  fi  
}

# Parameters:
# - variable name to set with result
# - prompt (string)
# will accept y, Y, or nothing as yes, anything else as no
prompt_yes_no() {
  local resultvarname="${1}"
  local userprompt="${2}"
  # bug #512 add support for answer file
  if [ -n "${!resultvarname}" ]; then
    if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_YELLOW}"; fi
    echo "$userprompt [Y/n] ${!resultvarname}"
    if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_NORMAL}"; fi
    return
  fi
  if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_YELLOW}"; fi
  echo -n "$userprompt [Y/n] "
  if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_NORMAL}"; fi
  local userinput
  read -n 1 userinput
  echo
  if [[ $userinput == "Y" || $userinput == "y" || $userinput == "" ]]; then
    eval $resultvarname="yes"
  else
    eval $resultvarname="no"
  fi
}

# Parameters:
# - character like 'a' for which to echo the character code
# echos the character code of the specified character
# For example:   ord a     will echo 97
ord() { printf '%d' "'$1"; }

# Parameters:
# - variable name to set with result
# - prompt text (include any punctuation such as ? or : you want to display)
# - default setting (do not include any brackets or punctuation). 
#   If the default setting is omitted, the current value of the output variable name will be used.
# Output:
# - result (input or default) is saved into the specified variable name
#
# Examples:
#   prompt_with_default USERNAME "What is your name?"
#   prompt_with_default USERCOLOR "What is your favorite color?" ${DEFAULT_COLOR}
prompt_with_default() {
  local resultvarname="${1}"
  local userprompt="${2}"
  local default_value
  eval default_value="${3:-\$$resultvarname}"
  # bug #512 add support for answer file
  if [ -n "${!resultvarname}" ]; then
    if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_YELLOW}"; fi
    echo "$userprompt [$default_value] ${!resultvarname:-$default_value}"
    if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_NORMAL}"; fi
    return
  fi
  if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_YELLOW}"; fi
  echo -n "$userprompt [$default_value] "
  if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_NORMAL}"; fi
  local userinput
  read userinput
  eval $resultvarname=${userinput:-$default_value}
}

# Same as prompt_with_default, but the default value is hidden by *******,
# and if prompt text is not provided then the default prompt is "Password:"
prompt_with_default_password() {
  local resultvarname="${1}"
  local userprompt="${2:-Password:}"
  local default_value
  eval default_value="${3:-\$$resultvarname}"
  local default_value_display="********"
  # bug #512 add support for answer file
  if [ -n "${!resultvarname}" ]; then
    if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_YELLOW}"; fi
    echo "$userprompt [$default_value_display] ${default_value_display}"
    if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_NORMAL}"; fi
    return
  fi
  if [ -z "$default_value" ]; then default_value_display=""; fi;
  if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_YELLOW}"; fi
  echo -n "$userprompt [$default_value_display] "
  if [ "$TERM_DISPLAY_MODE" = "color" ]; then echo -en "${TERM_COLOR_NORMAL}"; fi
  local userinput=""
  #IFS= read -r -s userinput
  #echo
  local input_counter=0
  local char
  while IFS= read -r -s -n 1 char
  do
    local code=`ord $char`
    if [[ $char == $'\0' ]]; then
      break
    elif [[ "$code" == "8" || "$code" == "127" ]]; then
      if (($input_counter > 0)); then
        echo -n $'\b \b';
        ((input_counter--))
        userinput="${userinput%?}"
      fi
    else
      echo -n '*'
      userinput+="$char";
      ((input_counter++))
    fi
  done
  echo
  eval $resultvarname=${userinput:-$default_value}
}


### FUNCTION LIBARRY: conditional execution functions

# TODO: rename to positive_condition
# parameters: condition variable name, status line, code to run
# Will print "status line... " and then "OK" or "FAILED"
action_condition() {
  local condvar="${1}"
  local statusline="${2}"
  local condfn="${3}"
  local cond=$(eval "echo \$${condvar}")
  echo -n "$statusline"
  echo -n "... "
  if [ -n "$cond" ]; then
    echo_success "Skipped"
  else # if [ -z "$cond" ]; then
    eval "$condfn"
    cond=$(eval "echo \$${condvar}")
    if [ -n "$cond" ]; then
      echo_success "OK"
    else
      echo_failure "FAILED"
    fi
  fi
}
# TODO: rename to negative_condition
# similar to action_condition but reverses the logic: empty is OK, defined is FAILED
inaction_condition() {
  local condvar="${1}"
  local statusline="${2}"
  local condfn="${3}"
  local cond=$(eval "echo \$${condvar}")
  echo -n "$statusline"
  echo -n "... "
  if [ -z "$cond" ]; then
    echo_success "Skipped"
  else # if [ -z "$cond" ]; then
    eval "$condfn"
    cond=$(eval "echo \$${condvar}")
    if [ -z "$cond" ]; then
      echo_success "OK"
    else
      echo_failure "FAILED"
    fi
  fi
}

### FUNCTION LIBRARY: file management

# parameter: one or more paths to check for existence
# output: the first entry found to exist
# example:
# mybinary=`first_existing /usr/local/bin/ahctl /usr/bin/ahctl /opt/local/bin/ahctl /opt/bin/ahctl /opt/intel/cloudsecurity/attestation-service/bin/ahctl`
first_existing() {
    local search_locations="$@"
    local file
    for file in $search_locations
    do
      if [[ -e "$file" ]]; then
        echo "$file"
        return 0
      fi
    done
    return 1
}

# parameters: one or more files/directories to check for existence
# return value: returns 0 if all files are present, 1 if any are missing; displays report on screen
# example:
# report_files_exist /etc/file1 /etc/file2
report_files_exist() {
    local search_locations="$@"
    local report_summary=0
    local file
    for file in $search_locations
    do
      if [[ -e "$file" ]]; then
        echo_success "$file" exists
      else
        echo_failure "$file" missing
        report_summary=1
      fi
    done
    return $report_summary
}

# makes a date-stamped backup copy of a file
backup_file() {
  local filename="${1}"
  local datestr=`date +%Y-%m-%d.%H%M`
  local backup_filename="${filename}.${datestr}"
  if [[ -n "$filename" && -f "$filename" ]]; then
    cp ${filename} ${backup_filename}
    echo "${backup_filename}"
  fi
}

# read a property from a property file formatted like NAME=VALUE
# parameters: property name, filename
# example: read_property_from_file MYFLAG FILENAME
# Automatically strips Windows carriage returns from the file
read_property_from_file() {
  local property="${1}"
  local filename="${2}"
  if [ -f "$filename" ]; then
    local found=`cat "$filename" | grep "^$property"`
    if [ -n "$found" ]; then
      #echo -n `cat "$filename" | tr -d '\r' | grep "^$property" | tr -d '\n' | awk -F '=' '{ print $2 }'`
      echo `cat "$filename" | tr -d '\r' | grep "^$property" | head -n 1 | awk -F '=' '{ print $2 }'`
    fi
  fi
}

# write a property into a property file, replacing the previous value
# parameters: property name, filename, new value
# example: update_property_in_file MYFLAG FILENAME true
update_property_in_file() {
  local property="${1}"
  local filename="${2}"
  local value="${3}"
  if [ -f "$filename" ]; then
  local ispresent=`grep "^${property}" "$filename"`
  if [ -n "$ispresent" ]; then
      # first escape the pipes new value so we can use it with replacement command, which uses pipe | as the separator
      local escaped_value=`echo "${value}" | sed 's/|/\\|/g'`
      # replace just that line in the file and save the file
      updatedcontent=`sed -re "s|^(${property})\s*=\s*(.*)|\1=${escaped_value}|" "${filename}"`
      # protect against an error
      if [ -n "$updatedcontent" ]; then
        echo "$updatedcontent" > "${filename}"
      else
        echo_warning "Cannot write $property to $filename with value: $value"
        echo -n 'sed -re "s|^('
        echo -n "${property}"
        echo -n ')=(.*)|\1='
        echo -n "${escaped_value}"
        echo -n '|" "'
        echo -n "${filename}"
        echo -n '"'
        echo
      fi
  else
      # property is not already in file so add it. extra newline in case the last line in the file does not have a newline
      echo "" >> "${filename}"
      echo "${property}=${value}" >> "${filename}"
  fi
  # test
  else
    # file does not exist so create it
    echo "${property}=${value}" > "${filename}"
  fi
}


### FUNCTION LIBRARY: package management

# TODO  replace all the other yum|rpm|...*detect
# with one function like package_manager_detect() that 
# detects all of them. then only one function needs to be
# called at the beginning and the results can be used
# any time.
# package_manager_detect() { ... }

# RedHat and CentOS may have yum and rpm

# Output:
# - variable "yum" contains path to yum or empty
yum_detect() {
  yum=`which yum 2>/dev/null`
  if [ -n "$yum" ]; then return 0; else return 1; fi
}
no_yum() {
  if yum_detect; then return 1; else return 0; fi
}

# Output:
# - variable "rpm" contains path to rpm or empty
rpm_detect() {
  rpm=`which rpm 2>/dev/null`
}

# Debian and Ubuntu may have apt-get and dpkg
# Output:
# - variable "aptget" contains path to apt-get or empty
# - variable "aptcache" contains path to apt-cache or empty
aptget_detect() {
  aptget=`which apt-get 2>/dev/null`
  aptcache=`which apt-cache 2>/dev/null`
}
# Output:
# - variable "dpkg" contains path to dpkg or empty
dpkg_detect() {
  dpkg=`which dpkg 2>/dev/null`
}

# SUSE has yast
# Output:
# - variable "yast" contains path to yast or empty
yast_detect() {
  yast=`which yast 2>/dev/null`
}

# SUSE has zypper
# Output:
# - variable "zypper" contains path to zypper or empty
zypper_detect() {
  zypper=`which zypper 2>/dev/null`
}

# Parameters:
# - absolute path to startup script to register
# - the name to use in registration (one word)
register_startup_script() {
  local absolute_filename="${1}"
  local startup_name="${2}"

  # try to install it as a startup script
  if [ -d /etc/init.d ]; then
    local prevdir=`pwd`
    cd /etc/init.d
    if [ -f "${startup_name}" ]; then rm -f "${startup_name}"; fi
    ln -s "${absolute_filename}" "${startup_name}"
    cd "$prevdir"
  fi

  # RedHat
  chkconfig=`which chkconfig  2>/dev/null`
  if [ -n "$chkconfig" ]; then
    $chkconfig --add "${startup_name}"  2>/dev/null
  fi

  # Ubuntu
  updatercd=`which update-rc.d  2>/dev/null`
  if [ -n "$updatercd" ]; then
    $updatercd "${startup_name}" defaults  2>/dev/null
  fi

}

# Ensure the package actually needs to be installed before calling this function.
# takes arguments: component name (string), package list prefix (string)
auto_install() {
  local component=${1}
  local cprefix=${2}
  local yum_packages=$(eval "echo \$${cprefix}_YUM_PACKAGES")
  local apt_packages=$(eval "echo \$${cprefix}_APT_PACKAGES")
  local yast_packages=$(eval "echo \$${cprefix}_YAST_PACKAGES")
  local zypper_packages=$(eval "echo \$${cprefix}_ZYPPER_PACKAGES")
  # detect available package management tools. start with the less likely ones to differentiate.
  yum_detect; yast_detect; zypper_detect; rpm_detect; aptget_detect; dpkg_detect;
  if [[ -n "$zypper" && -n "$zypper_packages" ]]; then
        zypper install $zypper_packages
  elif [[ -n "$yast" && -n "$yast_packages" ]]; then
        yast -i $yast_packages
  elif [[ -n "$yum" && -n "$yum_packages" ]]; then
        yum -y install $yum_packages
  elif [[ -n "$aptget" && -n "$apt_packages" ]]; then
        apt-get -y install $apt_packages
  fi
}

# this was used in setup.sh when we installed complete rpm or deb packages via the self-extracting installer.
# not currently used, but will be used again when we return to rpm and deb package descriptors
# in conjunction with the self-extracting installer 
my_service_install() {
  auto_install "Application requirements" "APPLICATION"
  if [[ -n "$dpkg" && -n "$aptget" ]]; then
    is_installed=`$dpkg --get-selections | grep "${package_name_deb}" | awk '{ print $1 }'`
    if [ -n "$is_installed" ]; then
      echo "Looks like ${package_name} is already installed. Cleaning..."
      $dpkg -P ${is_installed}
    fi
    echo "Installing $DEB_PACKAGE"
    $dpkg -i $DEB_PACKAGE
    $aptget -f install
  elif [[ -n "$rpm" && -n "$yum" ]]; then
    is_installed=`$rpm -qa | grep "${package_name_rpm}"`
    if [ -n "$is_installed" ]; then
      echo "Looks like ${package_name} is already installed. Cleaning..."
      $rpm -e ${is_installed}
    fi
    echo "Installing $RPM_PACKAGE"
    $rpm -i $RPM_PACKAGE
  fi
  $package_setup_cmd
}

### FUNCTION LIBRARY: NETWORK INFORMATION

# Echo all the localhost's non-loopback IP addresses
# Parameters: None
# Output:
#   The output of "ifconfig" will be scanned for any non-loopback address and all results will be echoed
hostaddress_list() {
  # if you want to exclude certain categories, such as 192.168, add this after the 127.0.0.1 exclusion:  grep -v "^192.168." 
  ifconfig | grep "inet addr" | awk '{ print $2 }' | awk -F : '{ print $2 }' | grep -v "127.0.0.1"
}


# Echo localhost's non-loopback IP address
# Parameters: None
# Output:
#   If the environment variable HOSTADDRESS exists and has a value, its value will be used (careful to make sure it only has one addres!).
#   Otherwise If the file /etc/ipaddress exists, the first line of its content will be echoed. This allows a system administrator to "override" the output of this function for the localhost.
#   Otherwise the output of "ifconfig" will be scanned for any non-loopback address and the first one will be used.
hostaddress() {
  if [ -n "$HOSTADDRESS" ]; then
    echo "$HOSTADDRESS"
  elif [ -s /etc/ipaddress ]; then
    cat /etc/ipaddress | head -n 1
  else
    # if you want to exclude certain categories, such as 192.168, add this after the 127.0.0.1 exclusion:  grep -v "^192.168." 
    local HOSTADDRESS=`hostaddress_list | head -n 1`
    echo "$HOSTADDRESS"
  fi
}



### FUNCTION LIBRARY: SSH FUNCTIONS

# Displays the fingerprints of all ssh host keys on this server
ssh_fingerprints() {
  local has_ssh_keygen=`which ssh-keygen 2>/dev/null`
  if [ -z "$has_ssh_keygen" ]; then echo_warning "missing program: ssh-keygen"; return; fi
  local ssh_pubkeys=`find /etc -name ssh_host_*.pub`
  for file in $ssh_pubkeys
  do
    local keybits=`ssh-keygen -lf "$file" | awk '{ print $1 }'`
    local keyhash=`ssh-keygen -lf "$file" | awk '{ print $2 }'`
    local keytype=`ssh-keygen -lf "$file" | awk '{ print $4 }' | tr -d '()'`
    echo "$keyhash ($keytype-$keybits)"
  done
}


### FUNCTION LIBRARY: java

java_clear() {
  JAVA_HOME=""
  java=""
  JAVA_VERSION=""
}

# Returns success (0) if the JAVA_HOME and java variables are set and if the java binary exists.
# Returns error (1) otherwise and displays the issue as a warning.
# Quick and repeatable. No side effects.
# Example:   if not java_ready; then java_ready_report; fi
# Note: We do NOT check JAVA_VERSION here because if someone has configured a specific Java they want to use,
# we don't care what version it is as long as it is present.  In contrast, the java_detect function sets JAVA_VERSION
java_ready_report() {
  if [[ -z "$JAVA_HOME" ]]; then echo_warning "JAVA_HOME variable is not set"; return 1; fi
  if [[ -z "$java" ]]; then echo_warning "Java binary path is not set"; return 1; fi
  if [[ ! -f "$java" ]]; then echo_warning "Cannot find Java binary at $java"; return 1; fi
  echo_success "Using Java at $java"
  return 0
}

# Returns success (0) if the JAVA_HOME and java variables are set and if the java binary exists.
# Returns error (1) otherwise.
# Quick and repeatable. No side effects.
# Example:   if java_ready; then $java -jar start.jar; fi
java_ready() {
  java_ready_report > /dev/null
  return $?
}


# prints the current java version
# return codes:
# 0 - success
# 1 - java command not found
# 2 - cannot get version number using java command
# Environment:
# - java  (path to java binary) you can get it by calling java_detect 
#    (or if you are calling this from java_detect you set it yourself)
java_version() {
  if [ -n "$java" ]; then
    # extract the version number from a string like: java version "1.6.0_29"
    local current_java_version=`$java -version 2>&1 | head -n 1 | sed -e 's/"//g' | awk '{ print $3 }'`
    if [ -n "$current_java_version" ]; then
      echo $current_java_version
      return 0
    fi
    return 2
  fi
  return 1
}

# Environment:
# - java_required_version
java_version_report() {
  local min_version="${1:-${JAVA_REQUIRED_VERSION:-${DEFAULT_JAVA_REQUIRED_VERSION}}}"
  local current_version=`java_version`
  if is_java_version_at_least "$current_version" "${min_version}"; then
    echo_success "Java version $current_version is ok"
    return 0
  else
    echo_warning "Java version $current_version is not supported, minimum is ${min_version}"
    return 1
  fi
}


# detects possible java installations
# does nothing if JAVA_HOME is already set; unset before calling to force detection
# uses the first installation found that meets the version requirement.
# prefers JDK over JRE installations, and prefers JRE over system-provided java
# This is not because JDK is better than JRE is better than system-provided java,
# but because if the system administrator has bothered to install the JDK or JRE
# it's clear he prefers to use that over the system-provided java.
# Environment:
# - JAVA_REQUIRED_VERSION should be set like 1.6 or 1.6.0_29 ; if not set then DEFAULT_JAVA_REQUIRED_VERSION is used
# Return code:  0 if java matching minimum version is found, 1 otherwise
# Postcondition:  on success, JAVA_HOME, java, and JAVA_VERSION are set;  on failure to find java they are cleared
java_detect() {
  local min_version="${1:-${JAVA_REQUIRED_VERSION:-${DEFAULT_JAVA_REQUIRED_VERSION}}}"
  # start with JAVA_HOME if it is already configured
  if [[ -n "$JAVA_HOME" ]]; then
    if [[ -z "$java" ]]; then
      java=${JAVA_HOME}/bin/java
    fi
    JAVA_VERSION=`java_version`
    if is_java_version_at_least "$JAVA_VERSION" "${min_version}"; then
      return 0
    fi
  fi

    JAVA_JDK_CANDIDATES=`find / -name java 2>/dev/null | grep jdk | grep -v jre | grep bin/java`
    for c in $JAVA_JDK_CANDIDATES
    do
        local java_bindir=`dirname $c`
#        if [ -f "$java_bindir/java" ]; then
         if [[ ! $java_bindir =~ "jre-abrt" && -f "$java_bindir/java" ]]; then
          JAVA_HOME=`dirname $java_bindir`
          java=$c
          JAVA_VERSION=`java_version`
          echo "Found Java: $JAVA_HOME"
          if is_java_version_at_least "$JAVA_VERSION" "${min_version}"; then
            return 0
          fi
        fi
    done
    
    echo "Cannot find JDK"

    JAVA_JRE_CANDIDATES=`find / -name java 2>/dev/null | grep jre | grep bin/java`
    for c in $JAVA_JRE_CANDIDATES
    do
        java_bindir=`dirname $c`
#        if [ -f "$java_bindir/java" ]; then
         if [[ ! $java_bindir =~ "jre-abrt" && -f "$java_bindir/java" ]]; then
          JAVA_HOME=`dirname $java_bindir`
          java=$c
          JAVA_VERSION=`java_version`
          echo "Found Java: $JAVA_HOME"
          if is_java_version_at_least "$JAVA_VERSION" "${min_version}"; then
            return 0
          fi
        fi
    done

    echo "Cannot find JRE"

    JAVA_BIN_CANDIDATES=`find / -name java 2>/dev/null | grep bin/java`
    for c in $JAVA_BIN_CANDIDATES
    do
        java_bindir=`dirname $c`
        # in non-JDK and non-JRE folders the "java" command may be a symlink:
#        if [ -f "$java_bindir/java" ]; then
         if [[ ! $java_bindir =~ "jre-abrt" && -f "$java_bindir/java" ]]; then
          JAVA_HOME=`dirname $java_bindir`
          java=$c
          JAVA_VERSION=`java_version`
          echo "Found Java: $c"
          if is_java_version_at_least "$JAVA_VERSION" "${min_version}"; then
            return 0
          fi
        elif [ -h "$java_bindir/java" ]; then
          local javatarget=`readlink $c`
#          if [ -f "$javatarget" ]; then
           if [[ ! $javatarget =~ "jre-abrt" && -f "$javatarget" ]]; then
            java_bindir=`dirname $javatarget`
            JAVA_HOME=`dirname $java_bindir`
            java=$javatarget
            JAVA_VERSION=`java_version`
            echo "Found Java: $java"
            if is_java_version_at_least "$JAVA_VERSION" "${min_version}"; then
              return 0
            fi
          else
            echo_warning "Broken link $c -> $javatarget"
          fi
        fi
    done

    echo "Cannot find system Java"

  echo_failure "Cannot find Java"
  java_clear
  return 1
}

# must load from config file or call java_detect prior to calling this function
java_env_report() {
  echo "JAVA_HOME=$JAVA_HOME"
  echo "java_bindir=$java_bindir"
  echo "java=$java"
}


# if java home and java bin are already configured and meet the minimum version, does nothing
# if they are not configured it initiates java detect to find them
# if
# Environment:
# - java_required_version in the format "1.6.0_29" (or pass it as a parameter)
java_require() {
  local min_version="${1:-${JAVA_REQUIRED_VERSION:-${DEFAULT_JAVA_REQUIRED_VERSION}}}"
  if [[ -z "$JAVA_HOME" || -z "$java" || ! -f "$java" ]]; then
    java_detect ${min_version} > /dev/null
  fi
  JAVA_VERSION=`java_version`
  if is_java_version_at_least "$JAVA_VERSION" "${min_version}"; then
    return 0
  fi
  echo_failure "Cannot find Java version $min_version or later"
  return 1
}

# usage:  if no_java 1.6; then echo_failure "Cannot find Java"; exit 1; fi
no_java() {
  java_require $1
  if [ $? -eq 0 ]; then return 1; else return 0; fi
}

# Environment:
# - java_required_version in the format "1.6.0_29"
java_install_openjdk() {
  JAVA_YUM_PACKAGES="java-1.6.0-openjdk java-1.6.0-openjdk-devel"
  JAVA_APT_PACKAGES="openjdk-6-jre openjdk-6-jdk"
  java_detect
  if [[ -z "$JAVA_HOME" || -z "$java" ]]; then
    auto_install "Java" "JAVA"
    java_detect
    if [[ -z "$JAVA_HOME" || -z "$java" ]]; then
      echo_failure "Cannot install Java"
      echo "Java download URL:"
      echo "http://www.java.com/en/download/"
    fi
  else
    echo "Java is already installed"
  fi
}

java_install() {
  local JAVA_PACKAGE="${1-:jdk-6u29-linux-x64.bin}"
#  JAVA_YUM_PACKAGES="java-1.6.0-openjdk java-1.6.0-openjdk-devel"
#  JAVA_APT_PACKAGES="openjdk-6-jre openjdk-6-jdk"
#  auto_install "Java" "JAVA"
  java_clear; java_detect >> $INSTALL_LOG_FILE
  if no_java ${java_required_version:-1.6} >> $INSTALL_LOG_FILE; then
    if [[ -z "$JAVA_PACKAGE" || ! -f "$JAVA_PACKAGE" ]]; then
      echo_failure "Missing Java installer: $JAVA_PACKAGE" | tee -a 
      return 1
    fi
    local javafile=$JAVA_PACKAGE
    echo "Installing $javafile"  >> $INSTALL_LOG_FILE
    is_gzip=`echo $javafile | grep ".gz$"`
    is_bin=`echo $javafile | grep ".bin$"`
    javaname=`echo $javafile | awk -F . '{ print $1 }'`
    if [ -n "$is_gzip" ]; then
      gunzip $javafile 2>&1 >/dev/null  >> $INSTALL_LOG_FILE
      chmod +x $javaname
      ./$javaname | grep -vE "inflating:|creating:|extracting:|linking:|^Creating" 
    elif [ -n "$is_bin" ]; then
      chmod +x $javafile
      ./$javafile | grep -vE "inflating:|creating:|extracting:|linking:|^Creating"  
    fi
    # java gets unpacked in current directory but they cleverly
    # named the folder differently than the archive, so search for it:
    local java_unpacked=`ls -1d jdk* jre* 2>/dev/null`
    for f in $java_unpacked
    do
      #echo "$f"
      if [ -d "$f" ]; then
        mv "$f" /usr/share
      fi
    done
    java_detect  >> $INSTALL_LOG_FILE
    if [[ -z "$JAVA_HOME" || -z "$java" ]]; then
      echo_failure "Unable to auto-install Java" | tee -a $INSTALL_LOG_FILE
      echo "  Java download URL:"                >> $INSTALL_LOG_FILE
      echo "  http://www.java.com/en/download/"  >> $INSTALL_LOG_FILE
    fi
  else
    echo "Java is already installed"              >> $INSTALL_LOG_FILE
  fi
}

java_keystore_cert_report() {
  local keystore="${1:-keystore.jks}"
  local keystorePassword="${2:-changeit}"
  local alias="${3:-s1as}"
  local keytool=${JAVA_HOME}/bin/keytool
  local owner_expires=`$keytool -list -v -alias $alias -keystore $keystore -storepass $keystorePassword | grep -E "^Owner|^Valid"`
  echo "$owner_expires"
  local fingerprints=`$keytool -list -v -alias $alias -keystore $keystore -storepass $keystorePassword | grep -E "MD5:|SHA1:"`
  echo "$fingerprints"
}

